// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: smartknob.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message FROM the SmartKnob to the host
type FromSmartKnob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*FromSmartKnob_Ack
	//	*FromSmartKnob_Log
	//	*FromSmartKnob_SmartknobState
	Payload isFromSmartKnob_Payload `protobuf_oneof:"payload"`
}

func (x *FromSmartKnob) Reset() {
	*x = FromSmartKnob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromSmartKnob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromSmartKnob) ProtoMessage() {}

func (x *FromSmartKnob) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromSmartKnob.ProtoReflect.Descriptor instead.
func (*FromSmartKnob) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{0}
}

func (x *FromSmartKnob) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (m *FromSmartKnob) GetPayload() isFromSmartKnob_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *FromSmartKnob) GetAck() *Ack {
	if x, ok := x.GetPayload().(*FromSmartKnob_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *FromSmartKnob) GetLog() *Log {
	if x, ok := x.GetPayload().(*FromSmartKnob_Log); ok {
		return x.Log
	}
	return nil
}

func (x *FromSmartKnob) GetSmartknobState() *SmartKnobState {
	if x, ok := x.GetPayload().(*FromSmartKnob_SmartknobState); ok {
		return x.SmartknobState
	}
	return nil
}

type isFromSmartKnob_Payload interface {
	isFromSmartKnob_Payload()
}

type FromSmartKnob_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

type FromSmartKnob_Log struct {
	Log *Log `protobuf:"bytes,3,opt,name=log,proto3,oneof"`
}

type FromSmartKnob_SmartknobState struct {
	SmartknobState *SmartKnobState `protobuf:"bytes,4,opt,name=smartknob_state,json=smartknobState,proto3,oneof"`
}

func (*FromSmartKnob_Ack) isFromSmartKnob_Payload() {}

func (*FromSmartKnob_Log) isFromSmartKnob_Payload() {}

func (*FromSmartKnob_SmartknobState) isFromSmartKnob_Payload() {}

// Message TO the Smartknob from the host
type ToSmartknob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion uint32 `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	Nonce           uint32 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*ToSmartknob_RequestState
	//	*ToSmartknob_SmartknobConfig
	Payload isToSmartknob_Payload `protobuf_oneof:"payload"`
}

func (x *ToSmartknob) Reset() {
	*x = ToSmartknob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToSmartknob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToSmartknob) ProtoMessage() {}

func (x *ToSmartknob) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToSmartknob.ProtoReflect.Descriptor instead.
func (*ToSmartknob) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{1}
}

func (x *ToSmartknob) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *ToSmartknob) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (m *ToSmartknob) GetPayload() isToSmartknob_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ToSmartknob) GetRequestState() *RequestState {
	if x, ok := x.GetPayload().(*ToSmartknob_RequestState); ok {
		return x.RequestState
	}
	return nil
}

func (x *ToSmartknob) GetSmartknobConfig() *SmartKnobConfig {
	if x, ok := x.GetPayload().(*ToSmartknob_SmartknobConfig); ok {
		return x.SmartknobConfig
	}
	return nil
}

type isToSmartknob_Payload interface {
	isToSmartknob_Payload()
}

type ToSmartknob_RequestState struct {
	RequestState *RequestState `protobuf:"bytes,3,opt,name=request_state,json=requestState,proto3,oneof"`
}

type ToSmartknob_SmartknobConfig struct {
	SmartknobConfig *SmartKnobConfig `protobuf:"bytes,4,opt,name=smartknob_config,json=smartknobConfig,proto3,oneof"`
}

func (*ToSmartknob_RequestState) isToSmartknob_Payload() {}

func (*ToSmartknob_SmartknobConfig) isToSmartknob_Payload() {}

// * Lets the host know that a ToSmartknob message was received and should not be retried.
type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce uint32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{2}
}

func (x *Ack) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{3}
}

func (x *Log) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type SmartKnobState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// * Current integer position of the knob. (Detent resolution is at integer positions)
	CurrentPosition int32 `protobuf:"varint,1,opt,name=current_position,json=currentPosition,proto3" json:"current_position,omitempty"`
	// *
	// Current fractional position. Typically will only range from (-snap_point, snap_point)
	// since further rotation will result in the integer position changing, but may exceed
	// those values if snap_point_bias is non-zero, or if the knob is at a bound. When the
	// knob is at a bound, this value can grow endlessly as the knob is rotated further past
	// the bound.
	//
	// When visualizing sub_position_unit, you will likely want to apply a rubber-band easing
	// function past the bounds; a sublinear relationship will help suggest that a bound has
	// been reached.
	SubPositionUnit float32 `protobuf:"fixed32,2,opt,name=sub_position_unit,json=subPositionUnit,proto3" json:"sub_position_unit,omitempty"`
	// *
	// Current SmartKnobConfig in effect at the time of this State snapshot.
	//
	// Beware that this config contains position and sub_position_unit values, not to be
	// confused with the top level current_position and sub_position_unit values in this State
	// message. The position values in the embedded config message will almost never be useful
	// to you; you probably want to be reading the top level values from the State message.
	Config *SmartKnobConfig `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// *
	// Value that changes each time the knob is pressed. Does not change when a press is released.
	//
	// Why this press state a "nonce" rather than a simple boolean representing the current
	// "pressed" state? It makes the protocol more robust to dropped/lost State messages; if
	// the knob was pressed/released quickly and State messages happened to be dropped during
	// that time, the press would be completely lost. Using a nonce allows the host to recognize
	// that a press has taken place at some point even if the State was lost during the press
	// itself. Is this overkill? Probably, let's revisit in future protocol versions.
	PressNonce uint32 `protobuf:"varint,4,opt,name=press_nonce,json=pressNonce,proto3" json:"press_nonce,omitempty"`
}

func (x *SmartKnobState) Reset() {
	*x = SmartKnobState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartKnobState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartKnobState) ProtoMessage() {}

func (x *SmartKnobState) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartKnobState.ProtoReflect.Descriptor instead.
func (*SmartKnobState) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{4}
}

func (x *SmartKnobState) GetCurrentPosition() int32 {
	if x != nil {
		return x.CurrentPosition
	}
	return 0
}

func (x *SmartKnobState) GetSubPositionUnit() float32 {
	if x != nil {
		return x.SubPositionUnit
	}
	return 0
}

func (x *SmartKnobState) GetConfig() *SmartKnobConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *SmartKnobState) GetPressNonce() uint32 {
	if x != nil {
		return x.PressNonce
	}
	return 0
}

type SmartKnobConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *
	// Set the integer position.
	//
	// Note: in order to make SmartKnobConfig apply idempotently, the current position
	// will only be set to this value when it changes compared to a previous config (and
	// NOT compared to the current state!). So by default, if you send a config position
	// of 5 and the current position is 3, the position may remain at 3 if the config
	// change to 5 was previously handled. If you need to force a position update, see
	// position_nonce.
	Position int32 `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	// *
	// Set the fractional position. Typical range: (-snap_point, snap_point).
	//
	// Actual range is technically unbounded, but in practice this value will be compared
	// against snap_point on the next control loop, so any value beyond the snap_point will
	// generally result in an integer position change (unless position is already at a
	// limit).
	//
	// Note: idempotency implications noted in the documentation for `position` apply here
	// as well
	SubPositionUnit float32 `protobuf:"fixed32,2,opt,name=sub_position_unit,json=subPositionUnit,proto3" json:"sub_position_unit,omitempty"`
	// *
	// Position is normally only applied when it changes, but sometimes it's desirable
	// to reset the position to the same value, so a nonce change can be used to force
	// the position values to be applied as well.
	//
	// NOTE: Must be < 256
	PositionNonce uint32 `protobuf:"varint,3,opt,name=position_nonce,json=positionNonce,proto3" json:"position_nonce,omitempty"`
	// * Minimum position allowed.
	MinPosition int32 `protobuf:"varint,4,opt,name=min_position,json=minPosition,proto3" json:"min_position,omitempty"`
	// *
	// Maximum position allowed.
	//
	// If this is the same as min_position, there will only be one allowed position.
	//
	// If this is less than min_position, bounds will be disabled.
	MaxPosition int32 `protobuf:"varint,5,opt,name=max_position,json=maxPosition,proto3" json:"max_position,omitempty"`
	// * The angular "width" of each position/detent, in radians.
	PositionWidthRadians float32 `protobuf:"fixed32,6,opt,name=position_width_radians,json=positionWidthRadians,proto3" json:"position_width_radians,omitempty"`
	// *
	// Strength of detents to apply. Typical range: [0, 1].
	//
	// A value of 0 disables detents.
	//
	// Values greater than 1 are not recommended and may lead to unstable behavior.
	DetentStrengthUnit float32 `protobuf:"fixed32,7,opt,name=detent_strength_unit,json=detentStrengthUnit,proto3" json:"detent_strength_unit,omitempty"`
	// *
	// Strength of endstop torque to apply at min/max bounds. Typical range: [0, 1].
	//
	// A value of 0 disables endstop torque, but does not make position unbounded, meaning
	// the knob will not try to return to the valid region. For unbounded rotation, use
	// min_position and max_position.
	//
	// Values greater than 1 are not recommended and may lead to unstable behavior.
	EndstopStrengthUnit float32 `protobuf:"fixed32,8,opt,name=endstop_strength_unit,json=endstopStrengthUnit,proto3" json:"endstop_strength_unit,omitempty"`
	// *
	// Fractional (sub-position) threshold where the position will increment/decrement.
	// Typical range: (0.5, 1.5).
	//
	// This defines how hysteresis is applied to positions, which is why values >
	SnapPoint float32 `protobuf:"fixed32,9,opt,name=snap_point,json=snapPoint,proto3" json:"snap_point,omitempty"`
	// *
	// Arbitrary 50-byte string representing this "config". This can be used to identify major
	// config/mode changes. The value will be echoed back to the host via a future State's
	// embedded config field so the host can use this value to determine the mode that was
	// in effect at the time of the State snapshot instead of having to infer it from the
	// other config fields.
	Text string `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
	// *
	// For a "magnetic" detent mode - where not all positions should have detents - this
	// specifies which positions (up to 5) have detents enabled. The knob will feel like it
	// is "magnetically" attracted to those positions, and will rotate smoothy past all
	// other positions.
	//
	// If you want to have more than 5 magnetic detent positions, you will need to dynamically
	// update this list as the knob is rotated. A recommended approach is to always send the
	// _nearest_ 5 detent positions, and send a new Config message whenever the list of
	// positions nearest the current position (as reported via State messages) changes.
	//
	// This approach enables effectively unbounded detent positions while keeping Config
	// bounded in size, and is resilient against tightly-packed detents with fast rotation
	// since multiple detent positions can be sent in advance; a full round-trip Config-State
	// isn't needed between each detent in order to keep up.
	DetentPositions []int32 `protobuf:"varint,11,rep,packed,name=detent_positions,json=detentPositions,proto3" json:"detent_positions,omitempty"`
	// *
	// Advanced feature for shifting the defined snap_point away from the center (position 0)
	// for implementing asymmetric detents. Typical value: 0 (symmetric detent force).
	//
	// This can be used to create detents that will hold the position when carefully released,
	// but can be easily disturbed to return "home" towards position 0.
	SnapPointBias float32 `protobuf:"fixed32,12,opt,name=snap_point_bias,json=snapPointBias,proto3" json:"snap_point_bias,omitempty"`
	// *
	// Hue (0-255) for all 8 ring LEDs, if supported. Note: this will likely be replaced
	// with more configurability in a future protocol version.
	LedHue int32 `protobuf:"varint,13,opt,name=led_hue,json=ledHue,proto3" json:"led_hue,omitempty"`
}

func (x *SmartKnobConfig) Reset() {
	*x = SmartKnobConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartKnobConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartKnobConfig) ProtoMessage() {}

func (x *SmartKnobConfig) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartKnobConfig.ProtoReflect.Descriptor instead.
func (*SmartKnobConfig) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{5}
}

func (x *SmartKnobConfig) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SmartKnobConfig) GetSubPositionUnit() float32 {
	if x != nil {
		return x.SubPositionUnit
	}
	return 0
}

func (x *SmartKnobConfig) GetPositionNonce() uint32 {
	if x != nil {
		return x.PositionNonce
	}
	return 0
}

func (x *SmartKnobConfig) GetMinPosition() int32 {
	if x != nil {
		return x.MinPosition
	}
	return 0
}

func (x *SmartKnobConfig) GetMaxPosition() int32 {
	if x != nil {
		return x.MaxPosition
	}
	return 0
}

func (x *SmartKnobConfig) GetPositionWidthRadians() float32 {
	if x != nil {
		return x.PositionWidthRadians
	}
	return 0
}

func (x *SmartKnobConfig) GetDetentStrengthUnit() float32 {
	if x != nil {
		return x.DetentStrengthUnit
	}
	return 0
}

func (x *SmartKnobConfig) GetEndstopStrengthUnit() float32 {
	if x != nil {
		return x.EndstopStrengthUnit
	}
	return 0
}

func (x *SmartKnobConfig) GetSnapPoint() float32 {
	if x != nil {
		return x.SnapPoint
	}
	return 0
}

func (x *SmartKnobConfig) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SmartKnobConfig) GetDetentPositions() []int32 {
	if x != nil {
		return x.DetentPositions
	}
	return nil
}

func (x *SmartKnobConfig) GetSnapPointBias() float32 {
	if x != nil {
		return x.SnapPointBias
	}
	return 0
}

func (x *SmartKnobConfig) GetLedHue() int32 {
	if x != nil {
		return x.LedHue
	}
	return 0
}

type RequestState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestState) Reset() {
	*x = RequestState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestState) ProtoMessage() {}

func (x *RequestState) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestState.ProtoReflect.Descriptor instead.
func (*RequestState) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{6}
}

type PersistentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32             `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Motor   *MotorCalibration  `protobuf:"bytes,2,opt,name=motor,proto3" json:"motor,omitempty"`
	Strain  *StrainCalibration `protobuf:"bytes,3,opt,name=strain,proto3" json:"strain,omitempty"`
}

func (x *PersistentConfiguration) Reset() {
	*x = PersistentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentConfiguration) ProtoMessage() {}

func (x *PersistentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentConfiguration.ProtoReflect.Descriptor instead.
func (*PersistentConfiguration) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{7}
}

func (x *PersistentConfiguration) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PersistentConfiguration) GetMotor() *MotorCalibration {
	if x != nil {
		return x.Motor
	}
	return nil
}

func (x *PersistentConfiguration) GetStrain() *StrainCalibration {
	if x != nil {
		return x.Strain
	}
	return nil
}

type MotorCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Calibrated           bool    `protobuf:"varint,1,opt,name=calibrated,proto3" json:"calibrated,omitempty"`
	ZeroElectricalOffset float32 `protobuf:"fixed32,2,opt,name=zero_electrical_offset,json=zeroElectricalOffset,proto3" json:"zero_electrical_offset,omitempty"`
	DirectionCw          bool    `protobuf:"varint,3,opt,name=direction_cw,json=directionCw,proto3" json:"direction_cw,omitempty"`
	PolePairs            uint32  `protobuf:"varint,4,opt,name=pole_pairs,json=polePairs,proto3" json:"pole_pairs,omitempty"`
}

func (x *MotorCalibration) Reset() {
	*x = MotorCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MotorCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MotorCalibration) ProtoMessage() {}

func (x *MotorCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MotorCalibration.ProtoReflect.Descriptor instead.
func (*MotorCalibration) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{8}
}

func (x *MotorCalibration) GetCalibrated() bool {
	if x != nil {
		return x.Calibrated
	}
	return false
}

func (x *MotorCalibration) GetZeroElectricalOffset() float32 {
	if x != nil {
		return x.ZeroElectricalOffset
	}
	return 0
}

func (x *MotorCalibration) GetDirectionCw() bool {
	if x != nil {
		return x.DirectionCw
	}
	return false
}

func (x *MotorCalibration) GetPolePairs() uint32 {
	if x != nil {
		return x.PolePairs
	}
	return 0
}

type StrainCalibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdleValue  int32 `protobuf:"varint,1,opt,name=idle_value,json=idleValue,proto3" json:"idle_value,omitempty"`
	PressDelta int32 `protobuf:"varint,2,opt,name=press_delta,json=pressDelta,proto3" json:"press_delta,omitempty"`
}

func (x *StrainCalibration) Reset() {
	*x = StrainCalibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smartknob_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrainCalibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrainCalibration) ProtoMessage() {}

func (x *StrainCalibration) ProtoReflect() protoreflect.Message {
	mi := &file_smartknob_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrainCalibration.ProtoReflect.Descriptor instead.
func (*StrainCalibration) Descriptor() ([]byte, []int) {
	return file_smartknob_proto_rawDescGZIP(), []int{9}
}

func (x *StrainCalibration) GetIdleValue() int32 {
	if x != nil {
		return x.IdleValue
	}
	return 0
}

func (x *StrainCalibration) GetPressDelta() int32 {
	if x != nil {
		return x.PressDelta
	}
	return 0
}

var File_smartknob_proto protoreflect.FileDescriptor

var file_smartknob_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6b, 0x6e, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x50, 0x42, 0x1a, 0x0c, 0x6e, 0x61, 0x6e, 0x6f, 0x70, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x4b, 0x6e, 0x6f, 0x62, 0x12, 0x30, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x05, 0x92, 0x3f, 0x02, 0x38, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x50, 0x42, 0x2e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x07, 0x2e, 0x50, 0x42, 0x2e, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x6f,
	0x67, 0x12, 0x3d, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6b, 0x6e, 0x6f, 0x62, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x50, 0x42, 0x2e,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x4b, 0x6e, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x6b, 0x6e, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x0b,
	0x54, 0x6f, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x6b, 0x6e, 0x6f, 0x62, 0x12, 0x30, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x38, 0x08, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x50, 0x42, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x10,
	0x73, 0x6d, 0x61, 0x72, 0x74, 0x6b, 0x6e, 0x6f, 0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x50, 0x42, 0x2e, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x4b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x6b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x1b, 0x0a, 0x03, 0x41, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x1f, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x92, 0x3f, 0x03, 0x70,
	0xff, 0x01, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x4b, 0x6e, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x50, 0x42, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x4b, 0x6e, 0x6f, 0x62,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x38, 0x08, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x9d, 0x04, 0x0a, 0x0f, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x4b, 0x6e, 0x6f, 0x62, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x2c, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x38,
	0x08, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x64, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x65, 0x6e, 0x64, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x65,
	0x6e, 0x64, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x19, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x05, 0x92, 0x3f, 0x02, 0x70, 0x32, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x10,
	0x64, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x10, 0x05, 0x52, 0x0f, 0x64,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x73, 0x6e, 0x61, 0x70, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x61,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x6c, 0x65, 0x64, 0x5f, 0x68, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x05, 0x92, 0x3f, 0x02, 0x38, 0x10, 0x52, 0x06,
	0x6c, 0x65, 0x64, 0x48, 0x75, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05,
	0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x50, 0x42,
	0x2e, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6d, 0x6f, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x50, 0x42, 0x2e, 0x53, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x74, 0x6f,
	0x72, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x7a, 0x65,
	0x72, 0x6f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x65, 0x50,
	0x61, 0x69, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x64, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_smartknob_proto_rawDescOnce sync.Once
	file_smartknob_proto_rawDescData = file_smartknob_proto_rawDesc
)

func file_smartknob_proto_rawDescGZIP() []byte {
	file_smartknob_proto_rawDescOnce.Do(func() {
		file_smartknob_proto_rawDescData = protoimpl.X.CompressGZIP(file_smartknob_proto_rawDescData)
	})
	return file_smartknob_proto_rawDescData
}

var file_smartknob_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_smartknob_proto_goTypes = []interface{}{
	(*FromSmartKnob)(nil),           // 0: PB.FromSmartKnob
	(*ToSmartknob)(nil),             // 1: PB.ToSmartknob
	(*Ack)(nil),                     // 2: PB.Ack
	(*Log)(nil),                     // 3: PB.Log
	(*SmartKnobState)(nil),          // 4: PB.SmartKnobState
	(*SmartKnobConfig)(nil),         // 5: PB.SmartKnobConfig
	(*RequestState)(nil),            // 6: PB.RequestState
	(*PersistentConfiguration)(nil), // 7: PB.PersistentConfiguration
	(*MotorCalibration)(nil),        // 8: PB.MotorCalibration
	(*StrainCalibration)(nil),       // 9: PB.StrainCalibration
}
var file_smartknob_proto_depIdxs = []int32{
	2, // 0: PB.FromSmartKnob.ack:type_name -> PB.Ack
	3, // 1: PB.FromSmartKnob.log:type_name -> PB.Log
	4, // 2: PB.FromSmartKnob.smartknob_state:type_name -> PB.SmartKnobState
	6, // 3: PB.ToSmartknob.request_state:type_name -> PB.RequestState
	5, // 4: PB.ToSmartknob.smartknob_config:type_name -> PB.SmartKnobConfig
	5, // 5: PB.SmartKnobState.config:type_name -> PB.SmartKnobConfig
	8, // 6: PB.PersistentConfiguration.motor:type_name -> PB.MotorCalibration
	9, // 7: PB.PersistentConfiguration.strain:type_name -> PB.StrainCalibration
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_smartknob_proto_init() }
func file_smartknob_proto_init() {
	if File_smartknob_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_smartknob_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromSmartKnob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToSmartknob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartKnobState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartKnobConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MotorCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smartknob_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrainCalibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_smartknob_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*FromSmartKnob_Ack)(nil),
		(*FromSmartKnob_Log)(nil),
		(*FromSmartKnob_SmartknobState)(nil),
	}
	file_smartknob_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ToSmartknob_RequestState)(nil),
		(*ToSmartknob_SmartknobConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_smartknob_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_smartknob_proto_goTypes,
		DependencyIndexes: file_smartknob_proto_depIdxs,
		MessageInfos:      file_smartknob_proto_msgTypes,
	}.Build()
	File_smartknob_proto = out.File
	file_smartknob_proto_rawDesc = nil
	file_smartknob_proto_goTypes = nil
	file_smartknob_proto_depIdxs = nil
}
